# -*- coding: utf-8 -*-
"""Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KepdjDPo4rNzKBXXM3CE9zs8BdKMCtwr
"""

!pip install pymongo

import pandas as pd  # Import pustaka pandas untuk manipulasi data, terutama dalam bentuk tabel atau DataFrame
import string  # Import pustaka string untuk manipulasi string
from pymongo import MongoClient  # Import kelas MongoClient dari pustaka pymongo untuk membuat koneksi ke database MongoDB
from IPython.display import display  # Mengimpor fungsi display dari IPython.display untuk menampilkan data
import matplotlib.pyplot as plt

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_CONNECTION"]

# Mengambil data dari koleksi MongoDB
cursor = collection.find()

# Mengonversi data ke DataFrame Pandas
df = pd.DataFrame(list(cursor))

display(df.head(16000))

"""## 1.1 Visualisasi dengan Wordcloud"""

import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Fungsi untuk plot WordCloud
def plot_cloud(wordcloud):
    plt.figure(figsize=(10, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.show()

# Gabungkan semua teks dalam kolom 'Clean_Text'
all_words = ' '.join([text for text in df['Clean_Text']])

# Buat WordCloud
wordcloud = WordCloud(
    width=3000,
    height=2000,
    random_state=3,
    background_color='black',
    colormap='RdPu',
    collocations=False,
    stopwords=STOPWORDS
).generate(all_words)

# Plot WordCloud
plot_cloud(wordcloud)

"""## 1.2 Visualisasi Diagram Untuk Setiap Tempat Wisata"""

from pymongo import MongoClient
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)

# Fungsi untuk memilih tempat wisata
def select_place_name():
    places = df['Place Name'].unique()
    print("Daftar Tempat Wisata:")
    for i, place in enumerate(places):
        print(f"{i+1}. {place}")

    while True:
        try:
            choice = int(input("Pilih nomor tempat wisata yang ingin Anda lihat label-nya: "))
            if 1 <= choice <= len(places):
                return places[choice - 1]
            else:
                print("Pilihan tidak valid. Masukkan nomor yang sesuai.")
        except ValueError:
            print("Input tidak valid. Masukkan nomor yang sesuai.")

# Fungsi untuk menampilkan diagram label
def display_label_chart():
    selected_place = select_place_name()
    reviews_by_place = df[df['Place Name'] == selected_place]

    if reviews_by_place.empty:
        print(f"Tidak ada review untuk tempat wisata '{selected_place}'.")
        return

    if 'label' not in reviews_by_place.columns:
        print("Tidak ada data label yang tersedia.")
        return

    label_counts = reviews_by_place['label'].value_counts().to_dict()
    labels = ['positif', 'netral', 'negatif']
    counts = [label_counts.get(label, 0) for label in labels]

    # Membuat diagram batang
    plt.figure(figsize=(8, 6))
    sns.barplot(x=labels, y=counts, palette="viridis")
    plt.title(f'Jumlah Label untuk Tempat Wisata: {selected_place}')
    plt.xlabel('Label')
    plt.ylabel('Jumlah')
    plt.show()

    # Membuat diagram lingkaran
    plt.figure(figsize=(8, 6))
    plt.pie(counts, labels=labels, autopct='%1.1f%%', colors=sns.color_palette("viridis"))
    plt.title(f'Persentase Label untuk Tempat Wisata: {selected_place}')
    plt.axis('equal')  # Untuk memastikan pie chart berbentuk lingkaran
    plt.show()

# Menampilkan diagram label berdasarkan tempat wisata tertentu
display_label_chart()

"""## 1.3 Visualisasi Diagram untuk Keseluruhan Tempat Wisata"""

from pymongo import MongoClient
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)

# Fungsi untuk menampilkan diagram label keseluruhan
def display_overall_label_chart():
    if 'label' not in df.columns:
        print("Tidak ada data label yang tersedia.")
        return

    label_counts = df['label'].value_counts().to_dict()
    labels = ['positif', 'netral', 'negatif']
    counts = [label_counts.get(label, 0) for label in labels]

    # Membuat diagram batang
    plt.figure(figsize=(10, 6))
    sns.barplot(x=labels, y=counts, palette="viridis")
    plt.title('Distribusi Label dari Semua Tempat Wisata')
    plt.xlabel('Label')
    plt.ylabel('Jumlah')
    plt.show()

    # Membuat diagram lingkaran
    plt.figure(figsize=(8, 6))
    plt.pie(counts, labels=labels, autopct='%1.1f%%', colors=sns.color_palette("viridis"))
    plt.title('Persentase Label dari Semua Tempat Wisata')
    plt.axis('equal')  # Untuk memastikan pie chart berbentuk lingkaran
    plt.show()

# Menampilkan diagram label keseluruhan
display_overall_label_chart()

"""## 1.4 Wordcloud Untuk Label Positif"""

import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
from pymongo import MongoClient

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)

# Filter review dengan label "positif"
positif_reviews = df[df['label'] == 'positif']

# Gabungkan semua teks dalam kolom 'Clean_Text' dari review yang positif
all_positive_words = ' '.join([text for text in positif_reviews['Clean_Text']])

# Buat WordCloud
wordcloud = WordCloud(
    width=3000,
    height=2000,
    random_state=3,
    background_color='black',
    colormap='RdPu',
    collocations=False,
    stopwords=STOPWORDS
).generate(all_positive_words)

# Fungsi untuk plot WordCloud
def plot_cloud(wordcloud):
    plt.figure(figsize=(10, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.show()

# Plot WordCloud
plot_cloud(wordcloud)

"""## 1.5 Wordcloud Untuk Label Negatif"""

import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
from pymongo import MongoClient

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)

# Filter review dengan label "negatif"
positif_reviews = df[df['label'] == 'negatif']

# Gabungkan semua teks dalam kolom 'Clean_Text' dari review yang positif
all_positive_words = ' '.join([text for text in positif_reviews['Clean_Text']])

# Buat WordCloud
wordcloud = WordCloud(
    width=3000,
    height=2000,
    random_state=3,
    background_color='black',
    colormap='RdPu',
    collocations=False,
    stopwords=STOPWORDS
).generate(all_positive_words)

# Fungsi untuk plot WordCloud
def plot_cloud(wordcloud):
    plt.figure(figsize=(10, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.show()

# Plot WordCloud
plot_cloud(wordcloud)

"""## 1.6 Heat Map"""

import seaborn as sns

# Contoh data heatmap
heatmap_data = df.pivot_table(index='Place Name', columns='label', aggfunc='size', fill_value=0)

# Membuat heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data, annot=True, fmt='d', cmap='coolwarm')
plt.title('Distribusi Sentimen per Tempat Wisata')
plt.xlabel('Sentimen')
plt.ylabel('Tempat Wisata')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.show()

"""## 1.7 Wordcloud Sentimen Negatif untuk Tempat Wisata Tertentu"""

import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
from pymongo import MongoClient

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)

# Filter review dengan label "negatif" dan Place Name "Taman Ujung"
negatif_reviews_taman_ujung = df[(df['label'] == 'positif') & (df['Place Name'] == 'Taman Ujung')]

# Gabungkan semua teks dalam kolom 'Clean_Text' dari review yang sesuai
all_negative_words_taman_ujung = ' '.join(negatif_reviews_taman_ujung['Clean_Text'].astype(str))

# Buat WordCloud
wordcloud = WordCloud(
    width=3000,
    height=2000,
    random_state=3,
    background_color='black',
    colormap='RdPu',
    collocations=False,
    stopwords=STOPWORDS
).generate(all_negative_words_taman_ujung)

# Fungsi untuk plot WordCloud
def plot_cloud(wordcloud):
    plt.figure(figsize=(10, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.show()

# Plot WordCloud
plot_cloud(wordcloud)

"""## 1.8 Tren Sentimen untuk Tempat Wisata Tertentu"""

import pandas as pd
import matplotlib.pyplot as plt
from pymongo import MongoClient

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)

# Pastikan kolom 'Review Time' dikonversi ke datetime
df['Review Time'] = pd.to_datetime(df['Review Time'])

# Ekstrak tanggal dari 'Review Time'
df['Date'] = df['Review Time'].dt.date

# Buat pivot table untuk menghitung jumlah review per tanggal dan label
trend_data = df.pivot_table(
    index='Date',
    columns='label',
    values='Place Name',
    aggfunc='count',
    fill_value=0
)

# Plot tren review
plt.figure(figsize=(14, 7))
for label in ['positif', 'negatif', 'netral']:
    if label in trend_data.columns:
        plt.plot(trend_data.index, trend_data[label], label=label)

plt.title('Trend Jumlah Review berdasarkan Label')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Review')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from pymongo import MongoClient

# Menghubungkan ke MongoDB
client = MongoClient('YOUR_MONGODB_CONNECTION_STRING')
db = client["YOUR_DATABASE"]
collection = db["YOUR_COLLECTION"]

# Mengambil data dari MongoDB ke dalam DataFrame
data = list(collection.find())
df = pd.DataFrame(data)


taman_ujung_reviews = df[df['Place Name'] == 'Taman Ujung']

# Ubah kolom 'Review Time' ke dalam format datetime
taman_ujung_reviews['Review Time'] = pd.to_datetime(taman_ujung_reviews['Review Time'])

# Kelompokkan data berdasarkan label dan waktu
grouped = taman_ujung_reviews.groupby([taman_ujung_reviews['Review Time'].dt.to_period('M'), 'label']).size().unstack(fill_value=0)

# Reset index dan konversi kembali ke datetime
grouped.index = grouped.index.to_timestamp()

# Plot visualisasi trend
plt.figure(figsize=(14, 7))
plt.plot(grouped.index, grouped['positif'], marker='o', linestyle='-', color='green', label='Positif')
plt.plot(grouped.index, grouped['negatif'], marker='o', linestyle='-', color='red', label='Negatif')
plt.plot(grouped.index, grouped['netral'], marker='o', linestyle='-', color='blue', label='Netral')

plt.title('Trend Review untuk Taman ujung')
plt.xlabel('Waktu')
plt.ylabel('Jumlah Review')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

